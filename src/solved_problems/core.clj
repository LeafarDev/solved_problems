(ns solved-problems.core
  (:require [solved-problems.helper :refer :all]))

(defn -main
  "I don't do a whole lot ... yet."
  [& args]
  (println "Hello, World!"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-one
  "If we list all the natural numbers below 10 that are multiples of 3 or 5
   we get 3, 5, 6 and 9. The sum of these multiples is 23.
   Find the sum of all the multiples of 3 or 5 below 1000."
  []
  (let [multiples (filter #(or (zero? (mod % 3)) (zero? (mod % 5)))
                          (range 1 1001))]
    (reduce #(+ %1 %2) multiples)))
(problem-one)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-two
  "Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be:
  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed four
   million, find the sum of the even-valued terms.\n"
  []
  (loop [a 0 b 1 sum 0]
    (if (<= (+ a b) 4000000)
      (if (= (mod (+ a b) 2) 0)
        (recur b (+ a b) (+ sum (+ a b)))
        (recur b (+ a b) sum))
      sum)))
(problem-two)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-three
  "The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the number 600851475143 ?"
  []
  (loop [number (bigint 3) last -1]
    (if (<= number (Math/sqrt (bigint 600851475143)))
      (if (and (prime? number)
               (zero? (mod (bigint 600851475143) number)))
        (recur (+ number 2) number)
        (recur (+ number 2) last))
      last)))
(problem-three)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn palindromic?
  [number]
  (= (str number) (apply str (reverse (str number)))))

(reverse (str 9009))

(defn palindromic-list
  []
  (loop [number 999 list []]
    (if (> number 99)
      (let [check (loop [n 999]
                    (if (> n 99)
                      (if (palindromic? (* number n))
                        (* number n)
                        (recur (dec n)))
                      -1))]
        (if (> check -1)
          (recur (dec number) (conj list check))
          (recur (dec number) list)))
      list)))

(defn problem-four
  "A palindromic number reads the same both ways.
   The largest palindrome made from the product of two 2-digit numbers
   is 9009 = 91 × 99. Find the largest palindrome made from the product
   of two 3-digit numbers"
  []
  (let [palindromic-list-sorted (sort (palindromic-list))]
    (last palindromic-list-sorted)))
(problem-four)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def range20 (range 1 21))
(defn number-prime-frequencies
  [number]
  (loop [n number current-prime 2 frequencies {}]
    (if (> n 1)
      (if (zero? (mod n current-prime))
        (let [frequence-prime (get frequencies (keyword (str current-prime)))
              inc-frequence-prime (if (nil? frequence-prime)
                                    1
                                    (inc frequence-prime))]
          (recur (bigint (/ n current-prime))
                 current-prime
                 (assoc frequencies (keyword (str current-prime)) inc-frequence-prime)))
        (recur n (next-prime current-prime) frequencies))
      frequencies)))
;; very slow
(defn problem-five-brute-force
  "2520 is the smallest number that can be divided by each of the numbers from 1 to 10
   without any remainder.
   What is the smallest positive number that is evenly divisible by all of
   the numbers from 1 to 20"
  []
  (loop [number-check 1]
    (if (= 20 (reduce #(+ %1 (if (zero? (mod number-check %2))
                               1
                               0))
                      range20))
      number-check
      (recur (inc (bigint number-check))))))
;; fast
(defn problem-five
  "2520 is the smallest number that can be divided by each of the numbers from 1 to 10
   without any remainder.
   What is the smallest positive number that is evenly divisible by all of
   the numbers from 1 to 20"
  []
  (let [range-frequencies (map #(number-prime-frequencies %) range20)
        set-keys (keys (apply conj range-frequencies))]
    (bigint
     (reduce
      *
      (map (fn [key]
             (Math/pow
              (key-to-int key)
              (apply max
                     (map #(if (nil? (key %))
                             0
                             (key %)) range-frequencies)))) set-keys)))))
(problem-five)
;; (problem-five-brute-force)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-six
  "The sum of the squares of the first ten natural numbers is 1^2 + 2^2 +...+ 10^2 =385
  The square of the sum of the first ten natural numbers is (1+2+...+10)^2=552=3025
  Hence the difference between the sum of the squares of the first ten natural numbers and
  the square of the sum is 3025−385=2640
  Find the difference between the sum of the squares of the first one hundred natural numbers
  and the square of the sum."
  []
  (bigint (- (Math/pow (reduce + (range 1 101)) 2)
             (reduce #(+ %1 (Math/pow %2 2)) (range 1 101)))))
(problem-six)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-seven []
  "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that
  the 6th prime is 13.
  What is the 10 001st prime number?"
  (last (loop [primes [2]]
          (if (= (count primes) 10001)
            primes
            (recur (conj primes (next-prime (last primes))))))))
(problem-seven)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-eight
  "The four adjacent digits in the 1000-digit number that have
the greatest product are 9 × 9 × 8 × 9 = 5832.
Find the thirteen adjacent digits in the 1000-digit
number that have the greatest product. What is the value of this product?"
  []
  (let [very-big-number (bigint 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450)
        digits (map #(bigint (str %)) (take 1000 (str very-big-number)))]
    (loop [index 0 largest-product {:digits [] :product 0}]
      (if (<= (+ index 13) (count digits))
        (let [last-largest-product (get largest-product :product)
              current-digits (subvec (vec digits) index (+ index 13))
              product-current-range (reduce * current-digits)]
          (if (> product-current-range last-largest-product)
            (recur (inc index) {:digits current-digits :product (bigint product-current-range)})
            (recur (inc index) largest-product)))
        largest-product))))
(problem-eight)