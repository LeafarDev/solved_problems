(ns solved-problems.core
  (:require [solved-problems.helper :refer :all]))

(defn -main
  "I don't do a whole lot ... yet."
  [& args]
  (println "Hello, World!"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-one
  "If we list all the natural numbers below 10 that are multiples of 3 or 5
   we get 3, 5, 6 and 9. The sum of these multiples is 23.
   Find the sum of all the multiples of 3 or 5 below 1000."
  []
  (let [multiples (filter #(or (zero? (mod % 3)) (zero? (mod % 5)))
                          (range 1 1001))]
    (reduce #(+ %1 %2) multiples)))
(problem-one)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-two
  "Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be:
  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed four
   million, find the sum of the even-valued terms.\n"
  []
  (loop [a 0 b 1 sum 0]
    (if (<= (+ a b) 4000000)
      (if (= (mod (+ a b) 2) 0)
        (recur b (+ a b) (+ sum (+ a b)))
        (recur b (+ a b) sum))
      sum)))
(problem-two)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-three
  "The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the number 600851475143 ?"
  []
  (loop [number (bigint 3) last -1]
    (if (<= number (Math/sqrt (bigint 600851475143)))
      (if (and (prime? number)
               (zero? (mod (bigint 600851475143) number)))
        (recur (+ number 2) number)
        (recur (+ number 2) last))
      last)))
(problem-three)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn palindromic?
  [number]
  (= (str number) (apply str (reverse (str number)))))

(reverse (str 9009))

(defn palindromic-list
  []
  (loop [number 999 list []]
    (if (> number 99)
      (let [check (loop [n 999]
                    (if (> n 99)
                      (if (palindromic? (* number n))
                        (* number n)
                        (recur (dec n)))
                      -1))]
        (if (> check -1)
          (recur (dec number) (conj list check))
          (recur (dec number) list)))
      list)))

(defn problem-four
  "A palindromic number reads the same both ways.
   The largest palindrome made from the product of two 2-digit numbers
   is 9009 = 91 Ã— 99. Find the largest palindrome made from the product
   of two 3-digit numbers"
  []
  (let [palindromic-list-sorted (sort (palindromic-list))]
    (last palindromic-list-sorted)))
(problem-four)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def range20 (range 1 21))
(defn number-prime-frequencies
  [number]
  (loop [n number current-prime 2 frequencies {}]
    (if (> n 1)
      (if (zero? (mod n current-prime))
        (let [frequence-prime (get frequencies (keyword (str current-prime)))
              inc-frequence-prime (if (nil? frequence-prime)
                                    1
                                    (inc frequence-prime))]
          (recur (bigint (/ n current-prime))
                 current-prime
                 (assoc frequencies (keyword (str current-prime)) inc-frequence-prime)))
        (recur n (next-prime current-prime) frequencies))
      frequencies)))
;; very slow
(defn problem-five-brute-force
  "2520 is the smallest number that can be divided by each of the numbers from 1 to 10
   without any remainder.
   What is the smallest positive number that is evenly divisible by all of
   the numbers from 1 to 20"
  []
  (loop [number-check 1]
    (if (= 20 (reduce #(+ %1 (if (zero? (mod number-check %2))
                               1
                               0))
                      range20))
      number-check
      (recur (inc (bigint number-check))))))
;; fast
(defn problem-five
  "2520 is the smallest number that can be divided by each of the numbers from 1 to 10
   without any remainder.
   What is the smallest positive number that is evenly divisible by all of
   the numbers from 1 to 20"
  []
  (let [range-frequencies (map #(number-prime-frequencies %) range20)
        set-keys (keys (apply conj range-frequencies))]
    (bigint
     (reduce
      *
      (map (fn [key]
             (Math/pow
              (key-to-int key)
              (apply max
                     (map #(if (nil? (key %))
                             0
                             (key %)) range-frequencies)))) set-keys)))))
(problem-five)
;; (problem-five-brute-force)

