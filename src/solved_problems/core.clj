(ns solved-problems.core
  (:require [solved-problems.helper :refer :all]
            [clojure.string :as str]))

(defn -main
  "I don't do a whole lot ... yet."
  [& args]
  (println "Hello, World!"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-one
  "If we list all the natural numbers below 10 that are multiples of 3 or 5
   we get 3, 5, 6 and 9. The sum of these multiples is 23.
   Find the sum of all the multiples of 3 or 5 below 1000."
  []
  (let [multiples (filter #(or (zero? (mod % 3)) (zero? (mod % 5)))
                          (range 1 1001))]
    (reduce #(+ %1 %2) multiples)))
(problem-one)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-two
  "Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be:
  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed four
   million, find the sum of the even-valued terms.\n"
  []
  (loop [a 0 b 1 sum 0]
    (if (<= (+ a b) 4000000)
      (if (= (mod (+ a b) 2) 0)
        (recur b (+ a b) (+ sum (+ a b)))
        (recur b (+ a b) sum))
      sum)))
(problem-two)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-three
  "The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the number 600851475143 ?"
  []
  (loop [number (bigint 3) last -1]
    (if (<= number (Math/sqrt (bigint 600851475143)))
      (if (and (prime? number)
               (zero? (mod (bigint 600851475143) number)))
        (recur (+ number 2) number)
        (recur (+ number 2) last))
      last)))
(problem-three)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn palindromic?
  [number]
  (= (str number) (apply str (reverse (str number)))))

(reverse (str 9009))

(defn palindromic-list
  []
  (loop [number 999 list []]
    (if (> number 99)
      (let [check (loop [n 999]
                    (if (> n 99)
                      (if (palindromic? (* number n))
                        (* number n)
                        (recur (dec n)))
                      -1))]
        (if (> check -1)
          (recur (dec number) (conj list check))
          (recur (dec number) list)))
      list)))

(defn problem-four
  "A palindromic number reads the same both ways.
   The largest palindrome made from the product of two 2-digit numbers
   is 9009 = 91 × 99. Find the largest palindrome made from the product
   of two 3-digit numbers"
  []
  (let [palindromic-list-sorted (sort (palindromic-list))]
    (last palindromic-list-sorted)))
(problem-four)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def range20 (range 1 21))
(defn number-prime-frequencies
  [number]
  (loop [n number current-prime 2 frequencies {}]
    (if (> n 1)
      (if (zero? (mod n current-prime))
        (let [frequence-prime (get frequencies (keyword (str current-prime)))
              inc-frequence-prime (if (nil? frequence-prime)
                                    1
                                    (inc frequence-prime))]
          (recur (bigint (/ n current-prime))
                 current-prime
                 (assoc frequencies (keyword (str current-prime)) inc-frequence-prime)))
        (recur n (next-prime current-prime) frequencies))
      frequencies)))
;; very slow
(defn problem-five-brute-force
  "2520 is the smallest number that can be divided by each of the numbers from 1 to 10
   without any remainder.
   What is the smallest positive number that is evenly divisible by all of
   the numbers from 1 to 20"
  []
  (loop [number-check 1]
    (if (= 20 (reduce #(+ %1 (if (zero? (mod number-check %2))
                               1
                               0))
                      range20))
      number-check
      (recur (inc (bigint number-check))))))
;; fast
(defn problem-five
  "2520 is the smallest number that can be divided by each of the numbers from 1 to 10
   without any remainder.
   What is the smallest positive number that is evenly divisible by all of
   the numbers from 1 to 20"
  []
  (let [range-frequencies (map #(number-prime-frequencies %) range20)
        set-keys (keys (apply conj range-frequencies))]
    (bigint
      (reduce
        *
        (map (fn [key]
               (Math/pow
                 (key-to-int key)
                 (apply max
                        (map #(if (nil? (key %))
                                0
                                (key %)) range-frequencies)))) set-keys)))))
(problem-five)
;; (problem-five-brute-force)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-six
  "The sum of the squares of the first ten natural numbers is 1^2 + 2^2 +...+ 10^2 =385
  The square of the sum of the first ten natural numbers is (1+2+...+10)^2=552=3025
  Hence the difference between the sum of the squares of the first ten natural numbers and
  the square of the sum is 3025−385=2640
  Find the difference between the sum of the squares of the first one hundred natural numbers
  and the square of the sum."
  []
  (bigint (- (Math/pow (reduce + (range 1 101)) 2)
             (reduce #(+ %1 (Math/pow %2 2)) (range 1 101)))))
(problem-six)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-seven []
  "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that
  the 6th prime is 13.
  What is the 10 001st prime number?"
  (last (loop [primes [2]]
          (if (= (count primes) 10001)
            primes
            (recur (conj primes (next-prime (last primes))))))))
(problem-seven)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-eight
  "The four adjacent digits in the 1000-digit number that have
the greatest product are 9 × 9 × 8 × 9 = 5832.
Find the thirteen adjacent digits in the 1000-digit
number that have the greatest product. What is the value of this product?"
  []
  (let [very-big-number (bigint 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450)
        digits (map #(bigint (str %)) (take 1000 (str very-big-number)))]
    (loop [index 0 largest-product {:digits [] :product 0}]
      (if (<= (+ index 13) (count digits))
        (let [last-largest-product (get largest-product :product)
              current-digits (subvec (vec digits) index (+ index 13))
              product-current-range (reduce * current-digits)]
          (if (> product-current-range last-largest-product)
            (recur (inc index) {:digits current-digits :product (bigint product-current-range)})
            (recur (inc index) largest-product)))
        largest-product))))
(problem-eight)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn check-triplet [a b c]
  (and (= (+ (Math/pow a 2) (Math/pow b 2)) (Math/pow c 2))
       (= (+ a b c) 1000)
       (and (< a b) (< b c))))

(defn check-c [a b]
  (loop [a a b b c (inc b)]
    (if (< c 1000)
      (if (check-triplet a b c)
        [a b c]
        (recur a b (inc c)))
      false)))

(defn check-b
  [a]
  (loop [a a b (inc a)]
    (if (< b 1000)
      (let [c (check-c a b)]
        (if (not= c false)
          c
          (recur a (inc b))))
      false)))

(defn problem-nine
  "A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
  a^2 + b^2 = c^2
  There exists exactly one Pythagorean triplet for which a + b + c = 1000.
  Find the product abc."
  []
  (loop [a 0]
    (if (< a 1000)
      (let [b (check-b a)]
        (if (not= b false)
          (reduce * b)
          (recur (inc a))))
      false)))

(problem-nine)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-ten
  "The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
  Find the sum of all the primes below two million."
  []
  (reduce + (filter #(not= % nil) (map #(when (prime? %) %) (range 1 2000000)))))
(problem-ten)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn problem-eleven
  "In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
     08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
     49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
     81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
     52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
     22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
     24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
     32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
     67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
     24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
     21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
     78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
     16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
     86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
     19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
     04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
     88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
     04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
     20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
     20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
     01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

     The product of these numbers is 26 × 63 × 78 × 14 = 1788696
     What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?"
  []
  (let [matriz "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"
        matriz-int (map #(bigint %) (str/split matriz #" "))
        matriz-vec (vec (map #(subvec (vec matriz-int) (- (* % 20) 20) (* % 20)) (range 1 21)))]
    (loop [line 0 biggest-product 0]
      (if (<= line 19)
        (let [biggest-line (-> (reduce
                                 #(concat %1 %2)
                                 (map #(vec [(norte line % matriz-vec)
                                             (sul line % matriz-vec)
                                             (leste line % matriz-vec)
                                             (oeste line % matriz-vec)
                                             (nordeste line % matriz-vec)
                                             (noroeste line % matriz-vec)
                                             (sudeste line % matriz-vec)
                                             (sudoeste line % matriz-vec)])
                                      (range 0 19)))
                               (sort)
                               (last))]
          (if (> biggest-line biggest-product)
            (recur (inc line) biggest-line)
            (recur (inc line) biggest-product)))
        biggest-product))))
(problem-eleven)


